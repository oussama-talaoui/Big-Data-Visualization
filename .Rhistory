load("C:/Users/franc/Downloads/heart.RData")
View(heart)
(cereals[,7:10],2, kurtosis)
## Import data set from the web
url="http://lib.stat.cmu.edu/datasets/1993.expo/cereal"
# or from local file
#cereals <- read.table("cereal.txt", header=TRUE, as.is=TRUE, na.strings="-1")
#names(cereals) <- c('name','mfr','type','calories','protein','fat','sodium','fiber','carbo',
'sugars','shelf','potass','vitamins','weight','cups')
source('~/.active-rstudio-document')
View(cereals)
names(cereals) <- c('name','mfr','type','calories','protein','fat','sodium','fiber','carbo',
'sugars','shelf','potass','vitamins','weight','cups')
#deleting missing values, creating new data frame cereal. There exist imputation methods, but we're not studying them.
cereals=na.omit(cereals)
#deleting missing values, creating new data frame cereal. There exist imputation methods, but we're not studying them.
cereals=na.omit(cereals)
#deleting missing values, creating new data frame cereal. There exist imputation methods, but we're not studying them.
cereals=na.omit(cereals)
cereals <- read.table(url, header=FALSE, as.is=TRUE, na.strings="-1")
## Import data set from the web
url="http://lib.stat.cmu.edu/datasets/1993.expo/cereal"
cereals <- read.table(url, header=FALSE, as.is=TRUE, na.strings="-1")
cereals
#checking for missing data and its number
sum(is.na(cereals))
#deleting missing values, creating new data frame cereal. There exist imputation methods, but we're not studying them.
cereals=na.omit(cereals)
cereals
str(cereals)
# Creating a factor
cereals$shelf <- factor(cereals$shelf, levels=1:3, ordered=TRUE)
cereals$shelf
table(cereals$shelf)
cereals$shelfC <- recode(cereals$shelf, " 1='low'; 2='medium'; 3='high' ")
# Basic statistical summary of the data set
summary(cereals)
## Skewness and kurtosis, need package "moments" to be loaded.
apply(cereals[,7:10],2, kurtosis)
# defining a function to calculate coefficient of variation:
cv=function(x){
sd=sqrt(var(x))
mu=abs(mean(x))
sd/mu}
# using it
apply(cereals[,7:10],2, cv)
#other function
cereal_stats=data.frame(
cv=apply(cereals[,c(4:10,12:15)],2,cv),
kurtosis=apply(cereals[,c(4:10,12:15)],2,kurtosis),
skew=apply(cereals[,c(4:10,12:15)],2,skewness))
#using it
print(cereal_stats, gap=3)
install.packages("moments")
## Skewness and kurtosis, need package "moments" to be loaded.
apply(cereals[,7:10],2, kurtosis)
## Skewness and kurtosis, need package "moments" to be loaded.
apply(cereals[,7:10],2, kurtosis)
install.packages("tidyverse")
rm (list = ls())
library(ggplot2)
library(tidyverse)
library(tidyselect)
add_three(num)
{
greater_than_threee->num*3
return(greater_than_threee)
}
add_three(num)
{
greater_than_three=num*3
return(greater_than_three)
}
add_three-<function(num)
{
greater_than_three=num+3
return(greater_than_three)
}
add_three-<function(num)
{
greater_than_three=num+3
return(greater_than_three)
}
add_three=function(num)
{
greater_than_three=num+3
return(greater_than_three)
}
imperial_to_metric <- function (feet,inches){
total_feet=feet+inches/12
meters=total_feet*0.3048
return(meters)
}
my_height(5,55)
my_height=imperial_to_metric(5,55)
name=c(colombia,peru,argentina,brasil,panama,venezuela)
name=c("colombia","peru","argentina","brasil","panama","venezuela")
n=c(1:49)
largo=lenght(n);
largo=lenght[(n)];
n=c(10:49)
n=n+1
plot(n)
?paste
emp=c(paste{"employee",1:100})
emp=c(paste("employee",1:100})
c=1:100
emp=c(paste("employee",c)
emp
emp=paste("employee",1:100)
emp
load("D:/Maestria UPM/M5 Statistical data analysis/Assignment 1/movies.RData")
load("C:/Users/franc/Downloads/movies.RData")
library(dplyr)
library(ggplot2)
library(purrr)
library(plyr)
library(stringr)
best_actor_win_table <- as.data.frame(table(movies$studio, movies$best_actor_win))
best_actor_win_table2 <- spread(best_actor_win_table, key = Var2, value = Freq)
best_actor_win_table2 <- rename(best_actor_win_table2, c (yes="a"))
best_actor_win_table2 <- rename(best_actor_win_table2, c (Var1="AA"))
best_actor_win_table2 <- rename(best_actor_win_table2, c (no="q"))
best_actress_win_table <- as.data.frame(table(movies$studio, movies$best_actress_win))
best_actress_win_table2 <- spread(best_actress_win_table, key = Var2, value = Freq)
best_actress_win_table2 <- rename(best_actress_win_table2, c (yes="b"))
best_actress_win_table2 <- rename(best_actress_win_table2, c (Var1="BB"))
best_actress_win_table2 <- rename(best_actress_win_table2, c (no="w"))
best_pic_win_table <- as.data.frame(table(movies$studio, movies$best_pic_win))
best_pic_win_table2 <- spread(best_pic_win_table, key = Var2, value = Freq)
best_pic_win_table2 <- rename(best_pic_win_table2, c (yes="c"))
best_pic_win_table2 <- rename(best_pic_win_table2, c (Var1="CC"))
best_pic_win_table2 <- rename(best_pic_win_table2, c (no="e"))
best_dir_win <- as.data.frame(table(movies$studio, movies$best_dir_win))
best_dir_win2 <- spread(best_dir_win, key = Var2, value = Freq)
best_dir_win2 <- rename(best_dir_win2, c (yes="d"))
best_dir_win2 <- rename(best_dir_win2, c (Var1="DD"))
best_dir_win2 <- rename(best_dir_win2, c (no="r"))
All <- cbind.data.frame(best_actor_win_table2, best_actress_win_table2, best_dir_win2, best_pic_win_table2)
All2 <- select(All,AA, a,b,c,d)
All2 <- mutate(All2, as= (a+b+c+d))
All2 <- arrange(All2,-as)
library(dplyr)
library(ggplot2)
library(purrr)
library(plyr)
library(stringr)
best_actor_win_table <- as.data.frame(table(movies$studio, movies$best_actor_win))
best_actor_win_table2 <- spread(best_actor_win_table, key = Var2, value = Freq)
library(tidyr)
best_actor_win_table2 <- spread(best_actor_win_table, key = Var2, value = Freq)
best_actor_win_table2 <- rename(best_actor_win_table2, c (yes="a"))
best_actor_win_table2 <- rename(best_actor_win_table2, c (Var1="AA"))
best_actor_win_table2 <- rename(best_actor_win_table2, c (no="q"))
best_actress_win_table <- as.data.frame(table(movies$studio, movies$best_actress_win))
best_actress_win_table2 <- spread(best_actress_win_table, key = Var2, value = Freq)
best_actress_win_table2 <- rename(best_actress_win_table2, c (yes="b"))
best_actress_win_table2 <- rename(best_actress_win_table2, c (Var1="BB"))
best_actress_win_table2 <- rename(best_actress_win_table2, c (no="w"))
best_pic_win_table <- as.data.frame(table(movies$studio, movies$best_pic_win))
best_pic_win_table2 <- spread(best_pic_win_table, key = Var2, value = Freq)
best_pic_win_table2 <- rename(best_pic_win_table2, c (yes="c"))
best_pic_win_table2 <- rename(best_pic_win_table2, c (Var1="CC"))
best_pic_win_table2 <- rename(best_pic_win_table2, c (no="e"))
best_dir_win <- as.data.frame(table(movies$studio, movies$best_dir_win))
best_dir_win2 <- spread(best_dir_win, key = Var2, value = Freq)
best_dir_win2 <- rename(best_dir_win2, c (yes="d"))
best_dir_win2 <- rename(best_dir_win2, c (Var1="DD"))
best_dir_win2 <- rename(best_dir_win2, c (no="r"))
All <- cbind.data.frame(best_actor_win_table2, best_actress_win_table2, best_dir_win2, best_pic_win_table2)
All2 <- select(All,AA, a,b,c,d)
All2 <- mutate(All2, as= (a+b+c+d))
All2 <- arrange(All2,-as)
View(All2)
View(All2)
View(movies)
View(movies)
All3-<All2(1:10)
All3<-All2(1:10)
All3 < -All2(1:10)
ALL2 < All2 %>% filter(AS > 10)
ALL2 < All2 %>% filter(AS > 10)
All <- cbind.data.frame(best_actor_win_table2, best_actress_win_table2, best_dir_win2, best_pic_win_table2)
All2 <- select(All,AA, a,b,c,d)
All2 <- mutate(All2, as= (a+b+c+d))
All2 <- arrange(All2,-as)
ALL2 < All2 %>% filter(AS > 10)
View(All2)
All3 <- as_tibble(All2)
All3 %>% slice(1:10)
View(All3)
ALL <-All3 %>% slice(1:10)
View(ALL)
install.packages("Rcmdr")
library(Rcmdr)
library(Rcmdr)
library(Rcmdr)
library(Rcmdr)
library(Rcmdr)
install.packages("dde")
##install.packages("shiny")
library(shiny)
getwd()
setwd("D:/Assignment/Visualization/App-1")
runApp("App-1")
setwd("D:/Assignment/Visualization")
runApp("App-1")
runApp("App-1")
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
shinyApp(ui = ui, server = server)
runApp("App-1")
runApp("App-1")
runApp("App-1")
runApp("App-1")
runApp("App-1")
runApp("App-1")
runApp("App-1")
runApp('App-2')
runApp('App-2')
runApp('App-2')
runApp('App-2')
runApp('App-2')
runApp('App-2')
runApp('App-2')
runApp('App-2')
runApp('App-2')
runApp('App-2')
runApp('App-2')
runApp('App-2')
runApp('App-2')
runApp('App-2')
runApp('App-2')
runApp('App-2')
runApp('App-2')
runApp('App-2')
runApp('App-2')
runApp('App-2')
runApp('App-2')
runApp('App-2')
runApp('App-2')
runApp('App-2')
runApp('App-3')
runApp('App-3')
runApp('App-3')
runApp('App-3')
runApp('App-3')
runApp('App-4')
runApp('App-4')
runApp('App-4')
runApp('App-4')
runApp('App-4')
runApp('App-4')
runApp('App-4')
runApp('App-4')
runApp('App-4')
runApp('App-4')
##LESSON-4
runApp("App-4")
##LESSON-5
install.packages(c("maps", "mapproj"))
library(maps)
library(mapproj
source("App-5/helpers.R"))
counties <- readRDS("App-5/data/counties.rds")
library(maps)
library(mapproj
source("App-5/helpers.R"))
library(mapproj
source("helpers.R"))
counties <- readRDS("App-5/data/counties.rds")
percent_map(counties$white, "darkgreen", "% White")
getwd()
library(maps)
##LESSON-5
install.packages(c("maps", "mapproj"))
install.packages(c("maps", "mapproj"))
library(maps)
library(mapproj
source("helpers.R"))
counties <- readRDS("census-app/data/counties.rds")
percent_map(counties$white, "darkgreen", "% White")
library(mapproj
source("helpers.R"))
library(mapproj
source("census-app/helpers.R"))
library(mapproj
source("census-app/helpers.R"))
library(maps)
library(mapproj
source("census-app/helpers.R"))
source("census-app/helpers.R")
counties <- readRDS("census-app/data/counties.rds")
percent_map(counties$white, "darkgreen", "% White")
shiny::runApp('census-app')
runApp("App-5")
runApp("census-app")
runApp("stockVis")
##LESSON-6
install.packages("quantmod")
runApp("stockVis")
runApp('stockVis')
##LESSON-6
install.packages("quantmod")
runApp("stockVis")
install.packages("quantmod")
